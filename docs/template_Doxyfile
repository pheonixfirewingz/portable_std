# Doxyfile 1.9.1

# This file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project
#
# All text after a hash (#) is considered a comment and will be ignored
# The format is:
#       TAG = value [value, ...]
# For lists items can also be appended using:
#       TAG += value [value, ...]
# Values that contain spaces should be placed between quotes (" ")

#---------------------------------------------------------------------------
# Project related configuration options
#---------------------------------------------------------------------------

# This tag specifies the encoding used for all characters in the config file
# that follow. The default is UTF-8 which is also the encoding used for all
# text before the first occurrence of this tag. Doxygen uses libiconv (or the
# iconv built into libc) for the transcoding. See
# https://www.gnu.org/software/libiconv/ for the list of possible encodings.

DOXYFILE_ENCODING      = UTF-8

# The PROJECT_NAME tag is a single word (or a sequence of words) that should
# identify the project. Note that if you do not use Doxywizard you need to put
# quotes around the project name if it contains spaces.

PROJECT_NAME           = LunaVoxelEngine

# The PROJECT_NUMBER tag can be used to specify a project number. Doxygen will
# generate a link to the project's homepage at http://www.doxygen.org.

PROJECT_NUMBER         = 0.0.1

# Using the PROJECT_BRIEF tag one can provide an optional one-sentence
# description for a project that appears in the notification in the GUI and
# in the Browse Reference Index and Source Files tabs.

PROJECT_BRIEF          = A high-performance voxel engine implemented in C++ and C, designed for efficient 3D graphics rendering.

# With the PROJECT_LOGO tag one can specify an logo or icon that is included
# in the documentation. The maximum height of the logo should not exceed 55
# pixels and the maximum width should not exceed 200 pixels. Doxygen will copy
# the logo to the output directory.

PROJECT_LOGO           =

# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) base
# path where the generated documentation will be put. If a relative path is
# entered, it will be relative to the location where doxygen was started. If
# left blank the current directory will be used.

OUTPUT_DIRECTORY       = ../docs

# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create
# 4096 sub-directories (in 2 levels) under the output directory of each output
# format and will distribute the generated files over these directories.
# Enabling this option can be useful when feeding doxygen a huge amount of
# source files, where putting all generated files in the same directory would
# otherwise cause performance problems for the file system.

CREATE_SUBDIRS         = YES

# The OUTPUT_LANGUAGE tag is used to specify the language in which all
# documentation generated by doxygen is written. Doxygen will use this
# information to generate all constant output in the proper language.

OUTPUT_LANGUAGE        = English

# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will include
# brief member descriptions after the members that are listed in the file and
# class documentation (similar to JavaDoc). Set to NO to disable this.

BRIEF_MEMBER_DESC      = YES

# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend the
# brief description of a member or function before the detailed description.
#
# Note: If both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the
# brief descriptions will be completely suppressed.

REPEAT_BRIEF           = YES

# This tag implements a quasi-intelligent brief description abbreviator that
# is used to form the text in various listings. Each string in this list, if
# found as the leading text of the brief description, will be stripped from the
# text and the result after the "=" will be used as the annotated text.
# Otherwise, the brief description is used as-is. If left blank, the following
# values are used ("$name" is automatically replaced with the name of the
# entity): "The $name class" "The $name widget" "The $name file" "is" "provides"
# "specifies" "contains" "represents" "a" "an" "the"

ABBREVIATE_BRIEF       =

# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then
# Doxygen will generate a detailed section even if there is only a brief
# description.

ALWAYS_DETAILED_SEC    = NO

# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all
# inherited members of a class in the documentation of that class as if those
# members were ordinary class members. Constructors, destructors and assignment
# operators of the base classes will not be shown.

INLINE_INHERITED_MEMB  = NO

# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full
# path before files name in the file list and in the header files. If set to
# NO the shortest path that makes the file name unique will be used.

FULL_PATH_NAMES        = YES

# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag can be
# used to strip a user-defined part of the path. Stripping is only done if one
# of the specified strings matches the left-hand part of the path. The tag can
# be used to show relative paths in the file list. If left blank the directory
# from which doxygen is run is used as the path to strip.

STRIP_FROM_PATH        =

# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of the
# path mentioned in the documentation of a class, which tells the reader which
# header file to include in order to use a class. If left blank only the name
# of the header file containing the class definition is used. Otherwise one
# should specify the include paths that are normally passed to the compiler
# using the -I flag.

STRIP_FROM_INC_PATH    =

# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter (but
# less readable) file names. This can be useful is your file systems doesn't
# support long names like on DOS, Mac, or CD-ROM.

SHORT_NAMES            = NO

# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen will interpret the
# first line (until the first dot) of a JavaDoc-style comment as the brief
# description. If set to NO, the JavaDoc tags are interpreted as normal
# comments (using the //! tag).

JAVADOC_AUTOBRIEF      = NO

# If the QT_AUTOBRIEF tag is set to YES then Doxygen will interpret the first
# line (until the first dot) of a Qt-style comment as the brief description.
# If set to NO, the comments will behave just like regular Qt-style comments
# (thus requiring an explicit \brief command for a brief description.)

QT_AUTOBRIEF          = NO

# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen treat a
# multi-line C++ special comment block (i.e. one that doesn't use /// or /*!
# but instead starts with /*) as a brief description. This used to be the
# default behaviour. The new default is to treat a multi-line C++ comment
# block as a detailed description. Set this tag to YES if you prefer the old
# behaviour instead.

MULTILINE_CPP_IS_BRIEF = NO

# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented
# member inherits the documentation from its parent class. If set to NO, an
# undocumented member is hidden.

INHERIT_DOCS           = YES

# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC
# tag is set to YES, then doxygen will reuse the documentation of the first
# member in the group (if any) for the other members of the group. By default
# all members of a group must be documented explicitly.

DISTRIBUTE_GROUP_DOC   = NO

# The TAB_SIZE tag can be used to set the number of spaces in a tab. Doxygen
# uses this value to replace tabs by spaces in code fragments.

TAB_SIZE               = 4

# This tag can be used to specify a number of aliases that act as commands in
# the documentation. An alias has the form "name=value". For example adding
# "sidebarsize=150" will make the notes appear as block quotes set to the size
# of 150.

ALIASES                =

# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C
# sources files only. Doxygen will then generate output that is more tailored
# for C. For instance, some of the names that are used will be different. The
# list of all members will be omitted, etc.

OPTIMIZE_OUTPUT_FOR_C  = NO

# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java
# sources files only. Doxygen will then generate output that is more tailored
# for Java. For instance, namespaces will be presented as packages, qualified
# scopes will look different, etc.

OPTIMIZE_OUTPUT_JAVA   = NO

# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran
# sources files only. Doxygen will then generate output that is more tailored
# for Fortran.

OPTIMIZE_FOR_FORTRAN   = NO

# Set the OPTIMIZE_OUTPUT_FOR_CPP tag to YES if your project consists of C++
# sources files only. Doxygen will then generate output that is more tailored
# for C++.

OPTIMIZE_OUTPUT_FOR_CPP = YES

